// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const PcsYcRefStruct = StructType({
  dc_voltage: primitiveTypes.float32,
  ac_voltage: primitiveTypes.float32,
  dc_current: primitiveTypes.float32,
  ac_current: primitiveTypes.float32,
  ac_frequency: primitiveTypes.float32,
  temperature: primitiveTypes.float32,
  dc_power: primitiveTypes.float32,
  ac_power: primitiveTypes.float32,
  reactive_power: primitiveTypes.float32,
  total_charge: primitiveTypes.float32,
  total_discharge: primitiveTypes.float32,
  operation_mode: primitiveTypes.uint32,
});
const PcsYcRefArray = ArrayType(PcsYcRefStruct);
const PcsYcRefStructArray = StructType({
  data: PcsYcRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class PcsYcWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new PcsYcRefStruct(other._refObject.toObject());
      this._dc_voltageIntialized = true;
      this._ac_voltageIntialized = true;
      this._dc_currentIntialized = true;
      this._ac_currentIntialized = true;
      this._ac_frequencyIntialized = true;
      this._temperatureIntialized = true;
      this._dc_powerIntialized = true;
      this._ac_powerIntialized = true;
      this._reactive_powerIntialized = true;
      this._total_chargeIntialized = true;
      this._total_dischargeIntialized = true;
      this._operation_modeIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new PcsYcRefStruct();
    this._dc_voltageIntialized = false;
    this._ac_voltageIntialized = false;
    this._dc_currentIntialized = false;
    this._ac_currentIntialized = false;
    this._ac_frequencyIntialized = false;
    this._temperatureIntialized = false;
    this._dc_powerIntialized = false;
    this._ac_powerIntialized = false;
    this._reactive_powerIntialized = false;
    this._total_chargeIntialized = false;
    this._total_dischargeIntialized = false;
    this._operation_modeIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new PcsYcWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new PcsYcArrayWrapper;
  }
  static get ArrayType() {
    return PcsYcArrayWrapper;
  }
  static get refObjectArrayType() {
    return PcsYcRefStructArray
  }
  static get refObjectType() {
    return PcsYcRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._dc_voltageIntialized) {
        throw new TypeError('Invalid argument: dc_voltage in PcsYc');
      }
      if (!this._ac_voltageIntialized) {
        throw new TypeError('Invalid argument: ac_voltage in PcsYc');
      }
      if (!this._dc_currentIntialized) {
        throw new TypeError('Invalid argument: dc_current in PcsYc');
      }
      if (!this._ac_currentIntialized) {
        throw new TypeError('Invalid argument: ac_current in PcsYc');
      }
      if (!this._ac_frequencyIntialized) {
        throw new TypeError('Invalid argument: ac_frequency in PcsYc');
      }
      if (!this._temperatureIntialized) {
        throw new TypeError('Invalid argument: temperature in PcsYc');
      }
      if (!this._dc_powerIntialized) {
        throw new TypeError('Invalid argument: dc_power in PcsYc');
      }
      if (!this._ac_powerIntialized) {
        throw new TypeError('Invalid argument: ac_power in PcsYc');
      }
      if (!this._reactive_powerIntialized) {
        throw new TypeError('Invalid argument: reactive_power in PcsYc');
      }
      if (!this._total_chargeIntialized) {
        throw new TypeError('Invalid argument: total_charge in PcsYc');
      }
      if (!this._total_dischargeIntialized) {
        throw new TypeError('Invalid argument: total_discharge in PcsYc');
      }
      if (!this._operation_modeIntialized) {
        throw new TypeError('Invalid argument: operation_mode in PcsYc');
      }
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._dc_voltageIntialized = true;
    this._refObject.dc_voltage = refObject.dc_voltage;
    this._ac_voltageIntialized = true;
    this._refObject.ac_voltage = refObject.ac_voltage;
    this._dc_currentIntialized = true;
    this._refObject.dc_current = refObject.dc_current;
    this._ac_currentIntialized = true;
    this._refObject.ac_current = refObject.ac_current;
    this._ac_frequencyIntialized = true;
    this._refObject.ac_frequency = refObject.ac_frequency;
    this._temperatureIntialized = true;
    this._refObject.temperature = refObject.temperature;
    this._dc_powerIntialized = true;
    this._refObject.dc_power = refObject.dc_power;
    this._ac_powerIntialized = true;
    this._refObject.ac_power = refObject.ac_power;
    this._reactive_powerIntialized = true;
    this._refObject.reactive_power = refObject.reactive_power;
    this._total_chargeIntialized = true;
    this._refObject.total_charge = refObject.total_charge;
    this._total_dischargeIntialized = true;
    this._refObject.total_discharge = refObject.total_discharge;
    this._operation_modeIntialized = true;
    this._refObject.operation_mode = refObject.operation_mode;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    PcsYcWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'interfaces', subFolder: 'msg', interfaceName: 'PcsYc'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get dc_voltage() {
    if (!this._dc_voltageIntialized) {
      return undefined;
    }
    return this._refObject.dc_voltage;
  }
  set dc_voltage(value) {
    this._dc_voltageIntialized = true;
    this._refObject.dc_voltage = value;
  }
  get ac_voltage() {
    if (!this._ac_voltageIntialized) {
      return undefined;
    }
    return this._refObject.ac_voltage;
  }
  set ac_voltage(value) {
    this._ac_voltageIntialized = true;
    this._refObject.ac_voltage = value;
  }
  get dc_current() {
    if (!this._dc_currentIntialized) {
      return undefined;
    }
    return this._refObject.dc_current;
  }
  set dc_current(value) {
    this._dc_currentIntialized = true;
    this._refObject.dc_current = value;
  }
  get ac_current() {
    if (!this._ac_currentIntialized) {
      return undefined;
    }
    return this._refObject.ac_current;
  }
  set ac_current(value) {
    this._ac_currentIntialized = true;
    this._refObject.ac_current = value;
  }
  get ac_frequency() {
    if (!this._ac_frequencyIntialized) {
      return undefined;
    }
    return this._refObject.ac_frequency;
  }
  set ac_frequency(value) {
    this._ac_frequencyIntialized = true;
    this._refObject.ac_frequency = value;
  }
  get temperature() {
    if (!this._temperatureIntialized) {
      return undefined;
    }
    return this._refObject.temperature;
  }
  set temperature(value) {
    this._temperatureIntialized = true;
    this._refObject.temperature = value;
  }
  get dc_power() {
    if (!this._dc_powerIntialized) {
      return undefined;
    }
    return this._refObject.dc_power;
  }
  set dc_power(value) {
    this._dc_powerIntialized = true;
    this._refObject.dc_power = value;
  }
  get ac_power() {
    if (!this._ac_powerIntialized) {
      return undefined;
    }
    return this._refObject.ac_power;
  }
  set ac_power(value) {
    this._ac_powerIntialized = true;
    this._refObject.ac_power = value;
  }
  get reactive_power() {
    if (!this._reactive_powerIntialized) {
      return undefined;
    }
    return this._refObject.reactive_power;
  }
  set reactive_power(value) {
    this._reactive_powerIntialized = true;
    this._refObject.reactive_power = value;
  }
  get total_charge() {
    if (!this._total_chargeIntialized) {
      return undefined;
    }
    return this._refObject.total_charge;
  }
  set total_charge(value) {
    this._total_chargeIntialized = true;
    this._refObject.total_charge = value;
  }
  get total_discharge() {
    if (!this._total_dischargeIntialized) {
      return undefined;
    }
    return this._refObject.total_discharge;
  }
  set total_discharge(value) {
    this._total_dischargeIntialized = true;
    this._refObject.total_discharge = value;
  }
  get operation_mode() {
    if (!this._operation_modeIntialized) {
      return undefined;
    }
    return this._refObject.operation_mode;
  }
  set operation_mode(value) {
    this._operation_modeIntialized = true;
    this._refObject.operation_mode = value;
  }
  copyRefObject(refObject) {
    this._refObject = new PcsYcRefStruct(refObject.toObject());
    this._dc_voltageIntialized = true;
    this._ac_voltageIntialized = true;
    this._dc_currentIntialized = true;
    this._ac_currentIntialized = true;
    this._ac_frequencyIntialized = true;
    this._temperatureIntialized = true;
    this._dc_powerIntialized = true;
    this._ac_powerIntialized = true;
    this._reactive_powerIntialized = true;
    this._total_chargeIntialized = true;
    this._total_dischargeIntialized = true;
    this._operation_modeIntialized = true;
  }
  copy(other) {
    this._refObject = new PcsYcRefStruct(other._refObject.toObject());
    this._dc_voltageIntialized = true;
    this._ac_voltageIntialized = true;
    this._dc_currentIntialized = true;
    this._ac_currentIntialized = true;
    this._ac_frequencyIntialized = true;
    this._temperatureIntialized = true;
    this._dc_powerIntialized = true;
    this._ac_powerIntialized = true;
    this._reactive_powerIntialized = true;
    this._total_chargeIntialized = true;
    this._total_dischargeIntialized = true;
    this._operation_modeIntialized = true;
  }
  static get classType() {
    return PcsYcWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"dc_voltage","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ac_voltage","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"dc_current","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ac_current","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ac_frequency","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"dc_power","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ac_power","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"reactive_power","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"total_charge","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"total_discharge","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"operation_mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"interfaces","type":"PcsYc","stringUpperBound":null,"isPrimitiveType":false},"msgName":"PcsYc"};
  }
  hasMember(name) {
    let memberNames = ["dc_voltage","ac_voltage","dc_current","ac_current","ac_frequency","temperature","dc_power","ac_power","reactive_power","total_charge","total_discharge","operation_mode"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class PcsYcArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof PcsYcWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new PcsYcWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PcsYcArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PcsYcArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new PcsYcRefArray(size);
    this._refObject = new PcsYcRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new PcsYcWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof PcsYcArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "PcsYcArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      PcsYcWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return PcsYcWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return PcsYcArrayWrapper;
  }
}
module.exports = PcsYcWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "dc_voltage",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ac_voltage",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "dc_current",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ac_current",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ac_frequency",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "dc_power",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ac_power",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "reactive_power",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "total_charge",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "total_discharge",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "operation_mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "interfaces",
    "type": "PcsYc",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "PcsYc"
}
*/
